heat_template_version: "2018-08-31"
description: "version 2017-09-01 created by HOT Generator at Mon, 25 Nov 2019 18:49:45 GMT."

parameters:
  key_name:
    type: string
    label: Key Name
    description: Name of key-pair to be used for compute instances

  image_name:
    type: string
    label: Image Name
    description: Name of the image to boot instances from
    default: "dev_env_1.0.0"

  network_name:
    type: string
    label: Network Name
    description: Name of network to be used for compute instances

resources:

  # Variables that the user shuold not be able to change
  floating_network:
    type: OS::Heat::Value
    properties:
      type: string
      value: 96d88aaf-1ef4-4d34-8aeb-3687c4f9dcc3

  network_subnet:
    type: OS::Heat::Value
    properties:
      type: string
      value: 10.0.0.0/8

  nfs_path:
    type: OS::Heat::Value
    properties:
      type: string
      value: /projects/data

  # Resource that are created by this template

  server_1:
    type: "OS::Nova::Server"
    properties:
      networks: [{"port": { get_resource: port_1}, "floating_ip": { get_resource: floating_ip_1 } }]
      name: "nsg-node-1"
      image: { get_param: image_name }
      flavor: "m1.medium"
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "$PRIVATE_KEY" > /home/ubuntu/.ssh/id_rsa
            echo "$PUBLIC_KEY" >> /home/ubuntu/.ssh/authorized_keys
            chown ubuntu:ubuntu /home/ubuntu/.ssh/id_rsa
            chmod 600 /home/ubuntu/.ssh/id_rsa
            printf "\nHost nsg-node-*\n\tStrictHostKeyChecking no\n" >> /etc/ssh/ssh_config

            # Install nfs server
            apt install -y nfs-kernel-server
            mkdir -p $NFS_PATH
            chown nobody:nogroup $NFS_PATH
            chmod 777 $NFS_PATH
            echo "$NFS_PATH $SUBNET(rw,sync,no_subtree_check)" >> /etc/exports
            exportfs -a
          params:
            $PRIVATE_KEY: { get_attr: [key_pair, private_key] }
            $PUBLIC_KEY: { get_attr: [key_pair, public_key] }
            $SUBNET: { get_attr: [network_subnet, value] }
            $NFS_PATH: { get_attr: [nfs_path, value] }
    depends_on: []

  server_2:
    type: "OS::Nova::Server"
    properties:
      networks: [{"port": { get_resource: port_2}, "floating_ip": { get_resource: floating_ip_2 } }]
      name: "nsg-node-2"
      image: { get_param: image_name }
      flavor: "m1.medium"
      key_name: { get_param: key_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "$PRIVATE_KEY" > /home/ubuntu/.ssh/id_rsa
            echo "$PUBLIC_KEY" >> /home/ubuntu/.ssh/authorized_keys
            chown ubuntu:ubuntu /home/ubuntu/.ssh/id_rsa
            chmod 600 /home/ubuntu/.ssh/id_rsa
            printf "\nHost nsg-node-*\n\tStrictHostKeyChecking no\n" >> /etc/ssh/ssh_config

            # Install nfs client
            apt-get install -y nfs-common
            mkdir -p $NFS_PATH
            chown ubuntu:ubuntu $NFS_PATH
            mount nsg-node-1:$NFS_PATH $NFS_PATH
          params:
            $PRIVATE_KEY: { get_attr: [key_pair, private_key] }
            $PUBLIC_KEY: { get_attr: [key_pair, public_key] }
            $NFS_PATH: { get_attr: [nfs_path, value] }
    depends_on: [server_1]

  floating_ip_1:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network: { get_attr: [floating_network, value] }

  floating_ip_2:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network: { get_attr: [floating_network, value] }

  port_1:
    type: "OS::Neutron::Port"
    properties:
      admin_state_up: true
      network: { get_param: network_name }
      security_groups: [{ get_resource: security_group_ssh }]

  port_2:
    type: "OS::Neutron::Port"
    properties:
      admin_state_up: true
      network: { get_param: network_name }
      security_groups: [{ get_resource: security_group_ssh }]

  key_pair:
    type: "OS::Nova::KeyPair"
    properties:
      name: "nsg-nodes-shared-key"
      save_private_key: true

  security_group_ssh:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          remote_ip_prefix: { get_attr: [network_subnet, value] }
        - direction: ingress
          ethertype: IPv4
          protocol: udp
          remote_ip_prefix: { get_attr: [network_subnet, value] }
        - direction: ingress
          ethertype: IPv4
          protocol: icmp

outputs:
  KeyPair_1_private_key:
    description: "The private_key of KeyPair_1."
    value: "{ get_attr: [key_pair, private_key] }"
